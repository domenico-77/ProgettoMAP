/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package swing;

import Threads.ThreadMusica;
import com.mycompany.progettomap.giochi.Gioco;
import com.mycompany.progettomap.parser.Parser;
import com.sun.glass.events.KeyEvent;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import logicaGioco.DescrizioneGioco;
import npc.Mob;
import salvataggio.Deserializzazione;
import salvataggio.Serializzazione;
import tipi.Utilita;

/**
 *
 * @author domen
 */
public class giocoGui extends JPanel {

    private DescrizioneGioco partita = null;
    private mainSwing ms;
    private Parser parser = new Parser(Utilita.caricaFileSet("./risorse/articoli.txt"));

    /**
     * Creates new form giocoGui
     */
    public giocoGui(mainSwing ms) {
        initComponents();
        this.ms = ms;
        this.visualizzazioneTesto.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        esci = new javax.swing.JButton();
        comando = new javax.swing.JTextField();
        manji = new javax.swing.JLabel();
        nord = new javax.swing.JButton();
        sud = new javax.swing.JButton();
        ovest = new javax.swing.JButton();
        est = new javax.swing.JButton();
        invia = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        visualizzazioneTesto = new javax.swing.JTextArea();
        muta = new javax.swing.JButton();
        smuta = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));

        esci.setBackground(new java.awt.Color(204, 0, 0));
        esci.setText("ESCI");
        esci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                esciActionPerformed(evt);
            }
        });

        comando.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comandoKeyPressed(evt);
            }
        });

        manji.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        manji.setForeground(new java.awt.Color(255, 255, 255));
        manji.setText("Manji:");

        nord.setBackground(new java.awt.Color(0, 153, 255));
        nord.setText("NORD");
        nord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nordActionPerformed(evt);
            }
        });

        sud.setBackground(new java.awt.Color(51, 153, 255));
        sud.setText("SUD");
        sud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sudActionPerformed(evt);
            }
        });

        ovest.setBackground(new java.awt.Color(51, 153, 255));
        ovest.setText("OVEST");
        ovest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ovestActionPerformed(evt);
            }
        });

        est.setBackground(new java.awt.Color(51, 153, 255));
        est.setText("EST");
        est.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estActionPerformed(evt);
            }
        });

        invia.setBackground(new java.awt.Color(153, 255, 153));
        invia.setText("INVIO");
        invia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviaActionPerformed(evt);
            }
        });

        visualizzazioneTesto.setBackground(new java.awt.Color(0, 0, 0));
        visualizzazioneTesto.setColumns(20);
        visualizzazioneTesto.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        visualizzazioneTesto.setForeground(new java.awt.Color(255, 255, 255));
        visualizzazioneTesto.setRows(5);
        jScrollPane1.setViewportView(visualizzazioneTesto);

        muta.setBackground(new java.awt.Color(255, 204, 102));
        muta.setText("muta");
        muta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mutaActionPerformed(evt);
            }
        });

        smuta.setBackground(new java.awt.Color(255, 255, 102));
        smuta.setText("smuta");
        smuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smutaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(muta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(smuta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(esci, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ovest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sud, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nord, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(est, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(manji, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comando, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(invia, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(esci, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nord)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                        .addComponent(sud))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(ovest)
                                            .addComponent(est, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(27, 27, 27))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(comando, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(manji, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addContainerGap())))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(invia, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(muta)
                            .addComponent(smuta))
                        .addGap(31, 31, 31))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void esciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_esciActionPerformed
        if (Utilita.chiediConfermaSwing("Sei sicuro di voler uscire?", "Uscita in corso...", "", this.visualizzazioneTesto, ms.getFrame())) {
            if (Utilita.chiediConfermaSwing("Vuoi salvare la partita?", "Salvataggio in corso", "Uscita senza salvataggio...", visualizzazioneTesto, ms.getFrame())) {
                try {
                    this.partita.setSospesa(true);
                    Serializzazione.scriviFile(this.partita);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(giocoGui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            this.visualizzazioneTesto.setText("");
            this.comando.setText("");
            this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
            this.ms.getFrame().validate();
        }
    }//GEN-LAST:event_esciActionPerformed

    private void inviaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviaActionPerformed
        this.visualizzazioneTesto.setText("");
        String comandoTesto = this.comando.getText();
        this.partita.nextMove(parser.parse(comandoTesto, this.partita.getGiocatore().getListaMosse(), this.partita.getStanzaCorrente().getOggetiStanza(), this.partita.getGiocatore().getInventario().getInventario(), this.partita.getStanzaCorrente()), this.visualizzazioneTesto, ms.getFrame());
        this.comando.setText("");
        if (this.partita.isSospesa()) {
            this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
            this.ms.getFrame().validate();
        } else if (this.partita.isFinita()) {
            JOptionPane.showMessageDialog(this.ms.getFrame(), "Finalmente i nostri eroi sono riusciti ad uscire dalla prigione\n"
                    + "una volta fuori, decisero di andare lontano dal villaggio e vivere in campagna insieme\n", "Complimenti hai completato il gioco", JOptionPane.INFORMATION_MESSAGE);

            try {
                Deserializzazione.cancellaPartitaFinita(this.partita);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(giocoGui.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
            this.ms.getFrame().validate();
        } else if (this.partita.getGiocatore().getVitaCorrente() <= 0) {
            JOptionPane.showMessageDialog(this.ms.getFrame(), "I nostri eroi non sono riusciti a fuggire dalla prigione", "Hai perso!", JOptionPane.INFORMATION_MESSAGE);
            try {
                Deserializzazione.cancellaPartitaFinita(this.partita);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(giocoGui.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
            this.ms.getFrame().validate();
        } else if (this.partita.getStanzaCorrente().isIlluminata()) {
            if (this.partita.getStanzaCorrente().getNpc() != null) {
                if (!this.partita.getStanzaCorrente().getNpc().isNeutrale()) {
                    Mob mob = (Mob) this.partita.getStanzaCorrente().getNpc();
                    if (mob.isVivo() && !mob.isCorrotto()) {
                        mob.interagisci(this.partita.getGiocatore(), this.visualizzazioneTesto, this.ms.getFrame());
                        if (this.partita.getGiocatore().getVitaCorrente() <= 0) {
                            JOptionPane.showMessageDialog(this.ms.getFrame(), "I nostri eroi non sono riusciti a fuggire dalla prigione", "Hai perso!", JOptionPane.INFORMATION_MESSAGE);
                            try {
                                Deserializzazione.cancellaPartitaFinita(this.partita);
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(giocoGui.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
                            this.ms.getFrame().validate();
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_inviaActionPerformed


    private void nordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nordActionPerformed
        this.visualizzazioneTesto.setText("");
        this.partita.spostamento(this.partita.getStanzaCorrente().getPortaNord(), this.visualizzazioneTesto, ms.getFrame());
        this.partita.controllaFineSwing(visualizzazioneTesto);
        if (this.partita.isFinita()) {
            JOptionPane.showMessageDialog(this.ms.getFrame(), "Finalmente i nostri eroi sono riusciti ad uscire dalla prigione\n"
                    + "una volta fuori, decisero di andare lontano dal villaggio e vivere in campagna insieme\n", "Complimenti hai completato il gioco", JOptionPane.INFORMATION_MESSAGE);

            try {
                Deserializzazione.cancellaPartitaFinita(this.partita);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(giocoGui.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
            this.ms.getFrame().validate();
        }
        else if (this.partita.getStanzaCorrente().isIlluminata()) {
            if (this.partita.getStanzaCorrente().getNpc() != null) {
                if (!this.partita.getStanzaCorrente().getNpc().isNeutrale()) {
                    Mob mob = (Mob) this.partita.getStanzaCorrente().getNpc();
                    if (mob.isVivo() && !mob.isCorrotto()) {
                        mob.interagisci(this.partita.getGiocatore(), this.visualizzazioneTesto, this.ms.getFrame());
                        if (this.partita.getGiocatore().getVitaCorrente() <= 0) {
                            JOptionPane.showMessageDialog(this.ms.getFrame(), "I nostri eroi non sono riusciti a fuggire dalla prigione", "Hai perso!", JOptionPane.INFORMATION_MESSAGE);
                            try {
                                Deserializzazione.cancellaPartitaFinita(this.partita);
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(giocoGui.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
                            this.ms.getFrame().validate();
                        }
                    }
                }
            }
        }
        
    }//GEN-LAST:event_nordActionPerformed

    private void sudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sudActionPerformed
        this.visualizzazioneTesto.setText("");
        this.partita.spostamento(this.partita.getStanzaCorrente().getPortaSud(), this.visualizzazioneTesto, ms.getFrame());
        if (this.partita.getStanzaCorrente().isIlluminata()) {
            if (this.partita.getStanzaCorrente().getNpc() != null) {
                if (!this.partita.getStanzaCorrente().getNpc().isNeutrale()) {
                    Mob mob = (Mob) this.partita.getStanzaCorrente().getNpc();
                    if (mob.isVivo() && !mob.isCorrotto()) {
                        mob.interagisci(this.partita.getGiocatore(), this.visualizzazioneTesto, this.ms.getFrame());
                        if (this.partita.getGiocatore().getVitaCorrente() <= 0) {
                            JOptionPane.showMessageDialog(this.ms.getFrame(), "I nostri eroi non sono riusciti a fuggire dalla prigione", "Hai perso!", JOptionPane.INFORMATION_MESSAGE);
                            try {
                                Deserializzazione.cancellaPartitaFinita(this.partita);
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(giocoGui.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
                            this.ms.getFrame().validate();
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_sudActionPerformed

    private void ovestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ovestActionPerformed
        this.visualizzazioneTesto.setText("");
        this.partita.spostamento(this.partita.getStanzaCorrente().getPortaOvest(), this.visualizzazioneTesto, ms.getFrame());
        if (this.partita.getStanzaCorrente().isIlluminata()) {
            if (this.partita.getStanzaCorrente().getNpc() != null) {
                if (!this.partita.getStanzaCorrente().getNpc().isNeutrale()) {
                    Mob mob = (Mob) this.partita.getStanzaCorrente().getNpc();
                    if (mob.isVivo() && !mob.isCorrotto()) {
                        mob.interagisci(this.partita.getGiocatore(), this.visualizzazioneTesto, this.ms.getFrame());
                        if (this.partita.getGiocatore().getVitaCorrente() <= 0) {
                            JOptionPane.showMessageDialog(this.ms.getFrame(), "I nostri eroi non sono riusciti a fuggire dalla prigione", "Hai perso!", JOptionPane.INFORMATION_MESSAGE);
                            try {
                                Deserializzazione.cancellaPartitaFinita(this.partita);
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(giocoGui.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
                            this.ms.getFrame().validate();
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_ovestActionPerformed

    private void estActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estActionPerformed
        this.visualizzazioneTesto.setText("");
        this.partita.spostamento(this.partita.getStanzaCorrente().getPortaEst(), this.visualizzazioneTesto, ms.getFrame());
        if (this.partita.getStanzaCorrente().isIlluminata()) {
            if (this.partita.getStanzaCorrente().getNpc() != null) {
                if (!this.partita.getStanzaCorrente().getNpc().isNeutrale()) {
                    Mob mob = (Mob) this.partita.getStanzaCorrente().getNpc();
                    if (mob.isVivo() && !mob.isCorrotto()) {
                        mob.interagisci(this.partita.getGiocatore(), this.visualizzazioneTesto, this.ms.getFrame());
                        if (this.partita.getGiocatore().getVitaCorrente() <= 0) {
                            JOptionPane.showMessageDialog(this.ms.getFrame(), "I nostri eroi non sono riusciti a fuggire dalla prigione", "Hai perso!", JOptionPane.INFORMATION_MESSAGE);
                            try {
                                Deserializzazione.cancellaPartitaFinita(this.partita);
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(giocoGui.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
                            this.ms.getFrame().validate();
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_estActionPerformed

    private void comandoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comandoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.visualizzazioneTesto.setText("");
            String comandoTesto = this.comando.getText();
            this.partita.nextMove(parser.parse(comandoTesto, this.partita.getGiocatore().getListaMosse(), this.partita.getStanzaCorrente().getOggetiStanza(), this.partita.getGiocatore().getInventario().getInventario(), this.partita.getStanzaCorrente()), this.visualizzazioneTesto, ms.getFrame());
            this.comando.setText("");
            if (this.partita.isSospesa()) {
                this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
                this.ms.getFrame().validate();
            } else if (this.partita.isFinita()) {
                JOptionPane.showMessageDialog(this.ms.getFrame(), "Finalmente i nostri eroi sono riusciti ad uscire dalla prigione\n"
                        + "una volta fuori, decisero di andare lontano dal villaggio e vivere in campagna insieme\n", "Complimenti hai completato il gioco", JOptionPane.INFORMATION_MESSAGE);

                try {
                    Deserializzazione.cancellaPartitaFinita(this.partita);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(giocoGui.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
                this.ms.getFrame().validate();
            } else if (this.partita.getGiocatore().getVitaCorrente() <= 0) {
                JOptionPane.showMessageDialog(this.ms.getFrame(), "I nostri eroi non sono riusciti a fuggire dalla prigione", "Hai perso!", JOptionPane.INFORMATION_MESSAGE);
                try {
                    Deserializzazione.cancellaPartitaFinita(this.partita);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(giocoGui.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
                this.ms.getFrame().validate();
            } else if (this.partita.getStanzaCorrente().isIlluminata()) {
                if (this.partita.getStanzaCorrente().getNpc() != null) {
                    if (!this.partita.getStanzaCorrente().getNpc().isNeutrale()) {
                        Mob mob = (Mob) this.partita.getStanzaCorrente().getNpc();
                        if (mob.isVivo() && !mob.isCorrotto()) {
                            mob.interagisci(this.partita.getGiocatore(), this.visualizzazioneTesto, this.ms.getFrame());
                            if (this.partita.getGiocatore().getVitaCorrente() <= 0) {
                                JOptionPane.showMessageDialog(this.ms.getFrame(), "I nostri eroi non sono riusciti a fuggire dalla prigione", "Hai perso!", JOptionPane.INFORMATION_MESSAGE);
                                try {
                                    Deserializzazione.cancellaPartitaFinita(this.partita);
                                } catch (FileNotFoundException ex) {
                                    Logger.getLogger(giocoGui.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                this.ms.getFrame().setContentPane(this.ms.getMenuInizio());
                                this.ms.getFrame().validate();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_comandoKeyPressed

    private void mutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mutaActionPerformed
         ThreadMusica.setVolumeOff();
    }//GEN-LAST:event_mutaActionPerformed

    private void smutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smutaActionPerformed
        ThreadMusica.setVolumeOn();
    }//GEN-LAST:event_smutaActionPerformed

    public void setPartita(DescrizioneGioco partita) {
        this.partita = partita;
    }

    public JTextArea getVisualizzazioneTesto() {
        return visualizzazioneTesto;
    }

    public JTextField getComando() {
        return comando;
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField comando;
    private javax.swing.JButton esci;
    private javax.swing.JButton est;
    private javax.swing.JButton invia;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel manji;
    private javax.swing.JButton muta;
    private javax.swing.JButton nord;
    private javax.swing.JButton ovest;
    private javax.swing.JButton smuta;
    private javax.swing.JButton sud;
    private javax.swing.JTextArea visualizzazioneTesto;
    // End of variables declaration//GEN-END:variables
}
